//
//  FlightsInteractor.swift
//  TestFlightCenter
//
//  Created by Ahmad Waqas on 14/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FlightsBusinessLogic
{
  func fetchFlights()
}

protocol FlightsDataStore
{
    var selectedFlight: LogicalSingleFlight { get set }
}

class FlightsInteractor: FlightsBusinessLogic, FlightsDataStore
{
    var selectedFlight = LogicalSingleFlight()
    var presenter: FlightsPresentationLogic?
    var worker: FlightsWorker?
    
    func fetchFlights() {
        //presenter. show progress hud
        let flightStore = FlightLocalStore() //FlightAPIStore()
        worker = FlightsWorker(flightStoreProtocol: flightStore)
        worker?.getAllFlightList(completion: { (result) in
            switch result {
                case .success(let flightList):
                    let res =  Flights.DisplayFlightList.Response(flights: flightList, message: "Success")
                    let viewModel = Flights.DisplayFlightList.ViewModel.init(response: res)
                    self.presenter?.presentSomething(response: viewModel)
                case .failure(let error): do {
                    let _ = Flights.DisplayFlightList.Response(flights: [], message: error.errorMessage)
                   
                }
            }
        })
    }
    
}
